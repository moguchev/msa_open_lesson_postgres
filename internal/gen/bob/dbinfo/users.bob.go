// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Users = Table[
	userColumns,
	userIndexes,
	userForeignKeys,
	userUniques,
	userChecks,
]{
	Schema: "",
	Name:   "users",
	Columns: userColumns{
		ID: column{
			Name:      "id",
			DBType:    "uuid",
			Default:   "gen_random_uuid()",
			Comment:   "Уникальный идентификатор ползователя",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Email: column{
			Name:      "email",
			DBType:    "text",
			Default:   "",
			Comment:   "email ползователя",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Username: column{
			Name:      "username",
			DBType:    "text",
			Default:   "",
			Comment:   "username ползователя",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		FullName: column{
			Name:      "full_name",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "Полное имя ползователя",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp with time zone",
			Default:   "now()",
			Comment:   "Когда создан",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		LastLogin: column{
			Name:      "last_login",
			DBType:    "timestamp with time zone",
			Default:   "NULL",
			Comment:   "Последний вход",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		IsActive: column{
			Name:      "is_active",
			DBType:    "boolean",
			Default:   "true",
			Comment:   "Активный пользователь",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: userIndexes{
		UsersPkey: index{
			Type: "btree",
			Name: "users_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		IdxUsersFullNameGin: index{
			Type: "gin",
			Name: "idx_users_full_name_gin",
			Columns: []indexColumn{
				{
					Name:         "to_tsvector('simple'::regconfig, full_name)",
					Desc:         null.FromCond(false, true),
					IsExpression: true,
				},
			},
			Unique:        false,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		IdxUsersUsername: index{
			Type: "btree",
			Name: "idx_users_username",
			Columns: []indexColumn{
				{
					Name:         "username",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        false,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		UsersEmailKey: index{
			Type: "btree",
			Name: "users_email_key",
			Columns: []indexColumn{
				{
					Name:         "email",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "users_pkey",
		Columns: []string{"id"},
		Comment: "",
	},

	Uniques: userUniques{
		UsersEmailKey: constraint{
			Name:    "users_email_key",
			Columns: []string{"email"},
			Comment: "",
		},
	},
	Checks: userChecks{
		UsersEmailCheck: check{
			constraint: constraint{
				Name:    "users_email_check",
				Columns: []string{"email"},
				Comment: "",
			},
			Expression: "(email = lower(email))",
		},
	},
	Comment: "Таблица пользователей",
}

type userColumns struct {
	ID        column
	Email     column
	Username  column
	FullName  column
	CreatedAt column
	LastLogin column
	IsActive  column
}

func (c userColumns) AsSlice() []column {
	return []column{
		c.ID, c.Email, c.Username, c.FullName, c.CreatedAt, c.LastLogin, c.IsActive,
	}
}

type userIndexes struct {
	UsersPkey           index
	IdxUsersFullNameGin index
	IdxUsersUsername    index
	UsersEmailKey       index
}

func (i userIndexes) AsSlice() []index {
	return []index{
		i.UsersPkey, i.IdxUsersFullNameGin, i.IdxUsersUsername, i.UsersEmailKey,
	}
}

type userForeignKeys struct{}

func (f userForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type userUniques struct {
	UsersEmailKey constraint
}

func (u userUniques) AsSlice() []constraint {
	return []constraint{
		u.UsersEmailKey,
	}
}

type userChecks struct {
	UsersEmailCheck check
}

func (c userChecks) AsSlice() []check {
	return []check{
		c.UsersEmailCheck,
	}
}
