// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/google/uuid"
	models "github.com/moguchev/msa_open_lesson_postgres/internal/gen/bob/schema"
)

type Factory struct {
	baseUserMods UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewUser(mods ...UserMod) *UserTemplate {
	return f.NewUserWithContext(context.Background(), mods...)
}

func (f *Factory) NewUserWithContext(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingUser(m *models.User) *UserTemplate {
	o := &UserTemplate{f: f, alreadyPersisted: true}

	o.ID = func() uuid.UUID { return m.ID }
	o.Email = func() string { return m.Email }
	o.Username = func() string { return m.Username }
	o.FullName = func() null.Val[string] { return m.FullName }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.LastLogin = func() null.Val[time.Time] { return m.LastLogin }
	o.IsActive = func() bool { return m.IsActive }

	return o
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}
