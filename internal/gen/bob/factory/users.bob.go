// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	models "github.com/moguchev/msa_open_lesson_postgres/internal/gen/bob/schema"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(context.Context, *UserTemplate)
}

type UserModFunc func(context.Context, *UserTemplate)

func (f UserModFunc) Apply(ctx context.Context, n *UserTemplate) {
	f(ctx, n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(ctx context.Context, n *UserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID        func() uuid.UUID
	Email     func() string
	Username  func() string
	FullName  func() null.Val[string]
	CreatedAt func() time.Time
	LastLogin func() null.Val[time.Time]
	IsActive  func() bool

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(ctx context.Context, mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.Email != nil {
		val := o.Email()
		m.Email = omit.From(val)
	}
	if o.Username != nil {
		val := o.Username()
		m.Username = omit.From(val)
	}
	if o.FullName != nil {
		val := o.FullName()
		m.FullName = omitnull.FromNull(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omit.From(val)
	}
	if o.LastLogin != nil {
		val := o.LastLogin()
		m.LastLogin = omitnull.FromNull(val)
	}
	if o.IsActive != nil {
		val := o.IsActive()
		m.IsActive = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.FullName != nil {
		m.FullName = o.FullName()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.LastLogin != nil {
		m.LastLogin = o.LastLogin()
	}
	if o.IsActive != nil {
		m.IsActive = o.IsActive()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if !(m.Email.IsValue()) {
		val := random_string(nil)
		m.Email = omit.From(val)
	}
	if !(m.Username.IsValue()) {
		val := random_string(nil)
		m.Username = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) error {
	var err error

	return err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomEmail(f),
		UserMods.RandomUsername(f),
		UserMods.RandomFullName(f),
		UserMods.RandomCreatedAt(f),
		UserMods.RandomLastLogin(f),
		UserMods.RandomIsActive(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val uuid.UUID) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() uuid.UUID) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Email(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmail() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomEmail(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Username(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) UsernameFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUsername() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUsername(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) FullName(val null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FullName = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) FullNameFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FullName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetFullName() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FullName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomFullName(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FullName = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomFullNameNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FullName = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) CreatedAt(val time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) CreatedAtFunc(f func() time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetCreatedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomCreatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) LastLogin(val null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastLogin = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) LastLoginFunc(f func() null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastLogin = f
	})
}

// Clear any values for the column
func (m userMods) UnsetLastLogin() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastLogin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomLastLogin(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastLogin = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomLastLoginNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastLogin = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) IsActive(val bool) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.IsActive = func() bool { return val }
	})
}

// Set the Column from the function
func (m userMods) IsActiveFunc(f func() bool) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.IsActive = f
	})
}

// Clear any values for the column
func (m userMods) UnsetIsActive() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.IsActive = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomIsActive(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.IsActive = func() bool {
			return random_bool(f)
		}
	})
}

func (m userMods) WithParentsCascading() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		if isDone, _ := userWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
