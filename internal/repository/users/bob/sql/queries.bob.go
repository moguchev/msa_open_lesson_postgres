// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sql

import (
	"context"
	_ "embed"
	"io"
	"iter"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/scan"
)

//go:embed queries.bob.sql
var formattedQueries_queries string

var findUserByEmailSQL = formattedQueries_queries[153:418]

type FindUserByEmailQuery = orm.ModQuery[*dialect.SelectQuery, findUserByEmail, FindUserByEmailRow, []FindUserByEmailRow, findUserByEmailTransformer]

func FindUserByEmail(Email string) *FindUserByEmailQuery {
	var expressionTypArgs findUserByEmail

	expressionTypArgs.Email = psql.Arg(Email)

	return &FindUserByEmailQuery{
		Query: orm.Query[findUserByEmail, FindUserByEmailRow, []FindUserByEmailRow, findUserByEmailTransformer]{
			ExecQuery: orm.ExecQuery[findUserByEmail]{
				BaseQuery: bob.BaseQuery[findUserByEmail]{
					Expression: expressionTypArgs,
					Dialect:    dialect.Dialect,
					QueryType:  bob.QueryTypeSelect,
				},
			},
			Scanner: func(context.Context, []string) (func(*scan.Row) (any, error), func(any) (FindUserByEmailRow, error)) {
				return func(row *scan.Row) (any, error) {
						var t FindUserByEmailRow
						row.ScheduleScanByIndex(0, &t.ID)
						row.ScheduleScanByIndex(1, &t.Email)
						row.ScheduleScanByIndex(2, &t.Username)
						row.ScheduleScanByIndex(3, &t.FullName)
						row.ScheduleScanByIndex(4, &t.CreatedAt)
						row.ScheduleScanByIndex(5, &t.LastLogin)
						row.ScheduleScanByIndex(6, &t.IsActive)
						return &t, nil
					}, func(v any) (FindUserByEmailRow, error) {
						return *(v.(*FindUserByEmailRow)), nil
					}
			},
		},
		Mod: bob.ModFunc[*dialect.SelectQuery](func(q *dialect.SelectQuery) {
			q.AppendSelect(expressionTypArgs.subExpr(7, 237))
			q.SetTable(expressionTypArgs.subExpr(243, 248))
			q.AppendWhere(expressionTypArgs.subExpr(255, 265))
		}),
	}
}

type FindUserByEmailRow = struct {
	ID        uuid.UUID           `db:"id"`
	Email     string              `db:"email"`
	Username  string              `db:"username"`
	FullName  null.Val[string]    `db:"full_name"`
	CreatedAt time.Time           `db:"created_at"`
	LastLogin null.Val[time.Time] `db:"last_login"`
	IsActive  bool                `db:"is_active"`
}

type findUserByEmailTransformer = bob.SliceTransformer[FindUserByEmailRow, []FindUserByEmailRow]

type findUserByEmail struct {
	Email bob.Expression
}

func (o findUserByEmail) args() iter.Seq[orm.ArgWithPosition] {
	return func(yield func(arg orm.ArgWithPosition) bool) {
		if !yield(orm.ArgWithPosition{
			Name:       "email",
			Start:      263,
			Stop:       265,
			Expression: o.Email,
		}) {
			return
		}
	}
}

func (o findUserByEmail) raw(from, to int) string {
	return findUserByEmailSQL[from:to]
}

func (o findUserByEmail) subExpr(from, to int) bob.Expression {
	return orm.ArgsToExpression(findUserByEmailSQL, from, to, o.args())
}

func (o findUserByEmail) WriteSQL(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
	return o.subExpr(0, len(findUserByEmailSQL)).WriteSQL(ctx, w, d, start)
}
